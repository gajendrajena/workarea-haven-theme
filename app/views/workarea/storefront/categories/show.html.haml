- @title = @category.browser_title
- @breadcrumbs = @category.breadcrumbs

- add_css(@category.css)
- add_javascript(@category.javascript)

- content_for :head do
  - cache "#{@category.cache_key}/head", expires_in: 1.hour do
    %meta{ property: 'recent-view', content: recent_view_content(category_id: @category.id) }
    %meta{ property: 'global-id', content: @category.to_global_id.to_param }

    - if @category.first_page? && !@category.has_filters?
      %meta{ name: 'robots', content: 'index, follow' }
    - else
      %meta{ name: 'robots', content: 'noindex, follow' }

    - if @category.first_page?
      %link{ href: category_url(@category), rel: 'canonical' }
    - else
      %link{ href: category_url(@category, page: @category.page), rel: 'canonical' }

    - if @category.second_page?
      %link{ href: category_url(@category), rel: 'prev' }
    - elsif !@category.first_page?
      %link{ href: url_for(page: @category.prev_page, only_path: false), rel: 'prev' }

    - unless @category.last_page?
      %link{ href: url_for(page: @category.next_page, only_path: false), rel: 'next' }

    - unless @category.meta_description.blank?
      %meta{ name: :description, content: @category.meta_description }

    %meta{ property: 'og:url', content: url_for(only_path: false) }
    %meta{ property: 'og:title', content: page_title }
    %meta{ property: 'og:type', content: 'website' }
    %meta{ property: 'og:image', content: image_url('workarea/storefront/logo.png') }

    = append_partials('storefront.category_head', category: @category)

- content_for :above_content do
  - if @category.content_blocks_for(:above_results).present?
    = render_content_blocks(@category.content_blocks_for(:above_results))

- content_for :page_aside do
  - cache "#{@category.cache_key}/aside", expires_in: 1.hour do
    = left_navigation if @category.show_navigation?

    - if @category.facets.any?
      .test
        - @category.facets.each do |facet|
          - facet.results.each do |value_name, count|
            - if facet.selected?
              %li.result-filters__filter{ class: facet.selected?(value_name) ? 'result-filters__filter--selected' : nil }
                = link_to facet_path(facet, value_name), rel: 'nofollow', class: 'result-filters__filter-link' do
                  %span.result-filters__filter-text= value_name
                  - if facet.selected?(value_name)
                    %span.result-filters__filter-remove= inline_svg('workarea/storefront/icons/x.svg', class: 'svg-icon svg-icon--tiny svg-icon--primary-color', title: t('workarea.storefront.products.remove_filter'))
      .result-filters{ data: { filter_view_more: '', accordion: { presetConfig: 'alternativeAccordionOptions' }.to_json } }
        - @category.facets.each do |facet|
          = render "workarea/storefront/facets/#{facet.type}", facet: facet

- cache @category.cache_key, expires_in: 1.hour do
  .view{ data: { analytics: category_view_analytics_data(@category).to_json } }

    - unless @category.products.any?
      %h1.result-filters__heading
        %span= @category.name
        %span.result-filters__count - #{@category.products.count}
      %p
        = t('workarea.storefront.products.none_found')
        - if @category.has_filters?
          = link_to t('workarea.storefront.products.reset_filters'), category_path(@category)
    - else

      .grid
        .grid__cell.grid__cell--50-at-medium
          %h1.result-filters__heading
            %span= @category.name
            %span.result-filters__count - #{@category.products.count}
        .grid__cell.grid__cell--50-at-medium
          = form_tag request.path, method: :get, class: 'result-filters__sort hidden hidden--for-small-only' do
            = facet_hidden_inputs(@category.facets)
            .property.property--responsive
              = label_tag 'sort_top', nil, class: 'property__name' do
                %span.property__text= t('workarea.storefront.searches.sort_by')
              %span.value= select_tag :sort, options_for_select(@category.sorts, selected: @category.sort), id: 'sort_top', data: { form_submitting_control: '' }
            .hidden-if-js-enabled
              = button_tag t('workarea.storefront.searches.sort'), value: 'sort_products_top', class: 'button'

      = append_partials('storefront.category_browse_controls', category: @category)

      - if @category.facets.any?
        .hidden.hidden--for-wide
          .mobile-filters
            = check_box_tag 'toggle_mobile_filters', nil, false, class: 'mobile-filters__control'
            .mobile-filters__trigger
              = label_tag 'toggle_mobile_filters', t('workarea.storefront.products.filter_results', count: @category.filters.count), class: 'button button--full', data: { mobile_filter_button: '' }
            .mobile-filters__content
              .mobile-filters__sort
                %h2.mobile-filters__heading= t('workarea.storefront.products.refine_results')
                = form_tag request.path, method: :get do
                  = facet_hidden_inputs(@category.facets)
                  .property.property--responsive
                    = label_tag 'sort_drawer', nil, class: 'property__name' do
                      %span.property__text= t('workarea.storefront.searches.sort_by')
                    %span.value= select_tag :sort, options_for_select(@category.sorts, selected: @category.sort), id: 'sort_drawer', data: { form_submitting_control: '' }
                  .hidden-if-js-enabled
                    = button_tag t('workarea.storefront.searches.sort'), value: 'sort_products_top', class: 'button'
              .result-filters{ data: { filter_view_more: '', accordion: { presetConfig: 'alternativeAccordionOptions' }.to_json } }
                - @category.facets.each do |facet|
                  = render "workarea/storefront/facets/#{facet.type}", facet: facet

      .pagination{ data: { analytics: product_list_analytics_data(@category.name).to_json, pagination: pagination_data(@category.products), back_to_top_button: '' } }
        .grid
          - @category.products.each do |product|
            .grid__cell.grid__cell--50.grid__cell--33-at-medium.grid__cell--25-at-wide{ data: { pagination_item: '' } }
              .product-summary{ itemscope: true, itemtype: 'http://schema.org/Product' }
                = render 'workarea/storefront/products/summary', product: product
        - if show_pagination?(@category.products)
          .pagination__button
            = link_to t('workarea.storefront.pagination.next_page'), pagination_path_for(page: @category.next_page), class: 'button', data: { pagination_button: '' }


    - if @category.content_blocks_for(:below_results).present?
      = render_content_blocks(@category.content_blocks_for(:below_results))
