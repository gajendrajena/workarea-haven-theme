.product-details__right-column
  .product-details__header
    %h1.product-details__name{ itemprop: 'name' }= product.name

    %p.product-details__id
      %span{ itemprop: 'productID' }= product.id
    = render 'workarea/storefront/products/reviews_aggregate', product: product

.product-details__left-column
  = render 'workarea/storefront/products/media', product: product

.product-details__right-column
  .product-prices.product-prices--details{ itemprop: 'offers', itemscope: true, itemtype: 'http://schema.org/Offer' }
    = render 'workarea/storefront/products/pricing', product: product

  - if product.description.present?
    .product-details__short-description
      %p= truncated_product_description(product, t('workarea.storefront.products.read_more'))

  = form_tag cart_items_path, method: 'post', class: 'product-details__add-to-cart-form', data: { dialog_form: { dialogOptions: { closeAll: true, initModules: true } }, analytics: add_to_cart_analytics_data(product).to_json } do
    = hidden_field_tag :product_id, product.id, id: dom_id(product, 'product_id')
    = hidden_field_tag :sku, product.current_sku

    - product.options_for_selection.each do |option|
      .property
        = label_tag option.slug, nil, class: 'property__name', for: "#{option.slug}_#{dom_id(product)}" do
          %span.property__text= option_label(option)
        .value
          - option.selections.each do |selection|
            = radio_button_tag option.slug, selection, option.current == selection, required: true, title: selection, class: 'visually-hidden'
            = link_to option_selection_url_for(product, option, selection), title: selection, class: "option-button option-button--#{selection.downcase.dasherize} option-button--#{option.name.downcase}#{' option-button--active' if option.current == selection}", data: { option_button: '' } do
              - swatch_content = render_swatch_option(selection, product.swatches_by_option[selection.optionize])

              - if swatch_content.present?
                = swatch_content
              - elsif product.images_by_option[selection.optionize].present?
                = image_tag(product_image_url(product.images_by_option[selection.optionize].first, :small_thumb), alt: selection, class: 'option-button__image')
              - else
                %span.option-button__text= selection

    - unless product.currently_selected_options.blank?
      = link_to t('workarea.storefront.products.clear_selections'), product_path(product), data: { option_button: '' }

    = append_partials('storefront.add_to_cart_form', product: product)

    - if product.purchasable?
      .product-details__quantity
        .property
          = label_tag :quantity, nil, class: 'property__name', for: "quantity#{dom_id(product)}" do
            %span.property__text= t('workarea.storefront.products.quantity')
          .quantity-control
            = button_tag '-', { type: 'button', data: { quantity_control: { 'direction': 'dec' }.to_json }, class: 'quantity-control__button quantity-control__button--decrement'}
            .value= number_field_tag :quantity, params[:quantity] || 1, min: 1, required: true, class: 'quantity-control__input text-box text-box--x-small', title: t('workarea.storefront.products.quantity'), id: "quantity#{dom_id(product)}"
            = button_tag '+', { type: 'button', data: { quantity_control: { 'direction': 'inc' }.to_json }, class: 'quantity-control__button quantity-control__button--increment'}

            - if product.current_sku.present?
              .value__note= product.inventory_status

      %p.product-details__add-to-cart-action= button_tag t('workarea.storefront.products.add_to_cart'), value: 'add_to_cart', class: 'button button--large'

    - else
      = hidden_field_tag :quantity, params[:quantity] || 1, id: "quantity#{dom_id(product)}"
      %p.product-details__unavailable= t('workarea.storefront.products.unavailable')

  = append_partials('storefront.product_details', product: product)

  %p.product-details__full-details=link_to t('workarea.storefront.products.view_full_details'), product_path(product, color: params[:color]), class: 'text-button', itemprop: 'url'
