require "test_helper"

module Workarea
  decorate Storefront::CategoriesWithPackagesSystemTest, with: :haven_theme do
    def test_basic_category_setup
      category = create_category
      categorize_products(category)

      visit storefront.category_path(category)

      assert(page.has_content?("Integration Product 1"))
      assert(page.has_content?("Integration Product 2"))
      assert(page.has_content?("Integration Package Product 1"))
      assert(page.has_content?("$10.00"))
      assert(page.has_content?("$5.00"))

      find(".result-filters__attribute", text: "Size").click

      assert(page.has_content?("Medium 3"))
      assert(page.has_content?("Small 2"))
    end

    def test_filtering_products
      category = create_category
      categorize_products(category)

      visit storefront.category_path(category)

      Capybara.match = :first

      find(".result-filters__attribute", text: "Price").click
      click_link "$10.00 - $19.99 2"

      assert(page.has_content?("Integration Product 1"))
      assert(page.has_no_content?("Integration Product 2"))
      assert(page.has_content?("Integration Package Product 1"))

      find(".result-filters__attribute", text: "Price").click
      click_link "$10.00 - $19.99 (remove)"

      assert(page.has_content?("Integration Product 1"))
      assert(page.has_content?("Integration Product 2"))
      assert(page.has_content?("Integration Package Product 1"))

      find(".result-filters__attribute", text: "Size").click
      click_link "Extra Large 1"

      assert(page.has_content?("Integration Package Product 1"))
      assert(page.has_no_content?("Integration Product 1"))
      assert(page.has_no_content?("Integration Product 2"))

      find(".result-filters__attribute", text: "Size").click
      click_link "Extra Large (remove)"

      assert(page.has_content?("Integration Product 1"))
      assert(page.has_content?("Integration Product 2"))
      assert(page.has_content?("Integration Package Product 1"))
    end

    def test_product_filtering_and_sorting
      category = create_category
      categorize_products(category)

      visit storefront.category_path(category)

      Capybara.match = :first
      find(".result-filters__attribute", text: "Price").click
      click_link "$10.00 - $19.99 2"

      assert(page.has_content?("Integration Product 1"))
      assert(page.has_no_content?("Integration Product 2"))
      assert(page.has_content?("Integration Package Product 1"))

      select("Price, Low to High", from: "sort_top")

      assert(page.has_content?("Integration Product 1"))
      assert(page.has_no_content?("Integration Product 2"))
      assert(page.has_content?("Integration Package Product 1"))
    end
  end
end
