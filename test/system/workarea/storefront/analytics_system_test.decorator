require 'test_helper'

module Workarea
  decorate Storefront::AnalyticsSystemTest, with: :haven_theme do
    def test_announcing_category_view_event
      visit storefront.category_path(@category)

      click_link 'Green'

      find(".result-filters__attribute", :text => "Size").click
      click_link 'Medium'

      assert(page.has_content?('Test Product 2'))

      events = find_analytics_events(for_event: 'categoryView')

      assert_equal(1, events.count)
      payload = events.first['arguments'].first

      assert_equal('Test Category', payload['name'])
      assert_equal('featured', payload['sort'])
      assert_equal(1, payload['page'])
      assert_equal(['Green'], payload['filters']['color'])
      assert_equal(['Medium'], payload['filters']['size'])
      assert_page_view
    end


    def test_announcing_search_results_view_event
      analytics = create_analytics_search(id: 'test')
      assert_equal(0, analytics.searches.this_week)

      visit storefront.search_path(q: 'test')
      wait_for_xhr
      assert_equal(1, analytics.reload.searches.this_week)

      events = find_analytics_events(for_event: 'searchResultsView')
      assert_equal(1, events.count)
      payload = events.first['arguments'].first

      assert_equal('test', payload['terms'])
      assert_equal('relevance', payload['sort'])
      assert_equal(1, payload['page'])
      assert_equal({}, payload['filters'])
      assert_equal(2, payload['totalResults'])
      assert_page_view

      click_link 'Green'

      events = find_analytics_events(for_event: 'searchResultsView')
      assert_equal(1, events.count)
      payload = events.first['arguments'].first

      assert_equal(['Green'], payload['filters']['color'])
      assert_equal(1, payload['totalResults'])
      assert_page_view
    end

    def test_filter_tracking
      analytics = create_analytics_filter(id: 'color_green')
      assert_equal(0, analytics.reload.clicks.this_week)

      visit storefront.category_path(@category)
      click_link 'Green'
      wait_for_xhr
      assert_equal(1, analytics.reload.clicks.this_week)

      visit storefront.search_path(q: 'test')
      click_link 'Green'
      wait_for_xhr
      assert_equal(2, analytics.reload.clicks.this_week)
    end

    def test_announcing_product_click_event_search_type_ahead
      @products.each { |p| Search::Storefront::Product.new(p).save }
      visit storefront.root_path
      disable_dom_events

      find('.page-header__button--search').click
      page.evaluate_script('$("#storefront_search").categorizedAutocomplete("search", "test");')

      find('li', text: 'Test Product 1').click

      events = find_analytics_events(for_event: 'productClick')
      assert_equal(1, events.count)
      payload = events.first['arguments'].first

      assert_equal('PROD1', payload['id'])
      assert_equal('Test Product 1', payload['name'])
      assert_equal('SKU1', payload['sku'])
      assert_equal(false, payload['sale'])
      assert_equal(10, payload['price'])
    end

    def test_announcing_checkout_edit_event
      setup_checkout_specs
      add_user_data
      start_guest_checkout

      fill_in_email
      fill_in_shipping_address
      click_button t('workarea.storefront.checkouts.continue_to_shipping')

      disable_dom_events
      click_link t('workarea.storefront.forms.edit'), match: :first

      events = find_analytics_events(for_event: 'checkoutEdit')
      assert_equal(1, events.count)
      payload = events.first['arguments'].first
      assert_equal('addresses', payload['type'])
    end
  end
end
